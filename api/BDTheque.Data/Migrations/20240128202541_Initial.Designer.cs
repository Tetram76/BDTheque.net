// <auto-generated />
using System;
using System.Collections.Generic;
using BDTheque.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BDTheque.Data.Migrations
{
    [DbContext(typeof(BDThequeContext))]
    [Migration("20240128202541_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:public.french_ci_ai", "fr_fr-u-ks-level1,fr_fr-u-ks-level1,icu,False")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "metier", new[] { "Scenariste", "Dessinateur", "Coloriste" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BDTheque.Data.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("AnneeParution")
                        .HasColumnType("integer")
                        .HasColumnName("annee_parution");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("HorsSerie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("hors_serie");

                    b.Property<char?>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(titre))::character(1)", true);

                    b.Property<bool?>("Integrale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("integrale");

                    b.Property<int?>("MoisParution")
                        .HasColumnType("integer")
                        .HasColumnName("mois_parution");

                    b.Property<int?>("NotationId")
                        .HasColumnType("integer")
                        .HasColumnName("notation_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NotesRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("notes_raw")
                        .HasComputedColumnSql("(notes COLLATE \"fr-x-icu\")", true);

                    b.Property<Guid?>("SerieId")
                        .HasColumnType("uuid")
                        .HasColumnName("serie_id");

                    b.Property<string>("Sujet")
                        .HasColumnType("text")
                        .HasColumnName("sujet")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("SujetRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("sujet_raw")
                        .HasComputedColumnSql("(sujet COLLATE \"fr-x-icu\")", true);

                    b.Property<string>("Titre")
                        .HasColumnType("text")
                        .HasColumnName("titre")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("TitreRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("titre_raw")
                        .HasComputedColumnSql("(titre COLLATE \"fr-x-icu\")", true);

                    b.Property<int?>("Tome")
                        .HasColumnType("integer")
                        .HasColumnName("tome");

                    b.Property<int?>("TomeDebut")
                        .HasColumnType("integer")
                        .HasColumnName("tome_debut");

                    b.Property<int?>("TomeFin")
                        .HasColumnType("integer")
                        .HasColumnName("tome_fin");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("NotationId");

                    b.HasIndex("SerieId");

                    b.HasIndex("Titre");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Titre"), new[] { "french_ci_ai" });

                    b.HasIndex("TitreRaw");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Auteur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Metier")
                        .HasColumnType("metier")
                        .HasColumnName("metier");

                    b.Property<Guid>("PersonneId")
                        .HasColumnType("uuid")
                        .HasColumnName("personne_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PersonneId");

                    b.ToTable("auteurs", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.AuteurAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid")
                        .HasColumnName("album_id");

                    b.Property<Guid>("AuteurId")
                        .HasColumnType("uuid")
                        .HasColumnName("auteur_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AuteurId", "AlbumId")
                        .IsUnique();

                    b.ToTable("auteurs_albums", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.AuteurSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AuteurId")
                        .HasColumnType("uuid")
                        .HasColumnName("auteur_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uuid")
                        .HasColumnName("serie_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("AuteurId", "SerieId")
                        .IsUnique();

                    b.ToTable("auteurs_series", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EditeurId")
                        .HasColumnType("uuid")
                        .HasColumnName("editeur_id");

                    b.Property<char>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(nom))::character(1)", true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NomRaw")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("nom_raw")
                        .HasComputedColumnSql("(nom COLLATE \"fr-x-icu\")", true);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nom");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Nom"), new[] { "french_ci_ai" });

                    b.HasIndex("NomRaw");

                    b.HasIndex("EditeurId", "Id")
                        .IsUnique();

                    b.HasIndex("EditeurId", "Nom")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("EditeurId", "Nom"), new[] { null, "french_ci_ai" });

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.CoteAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Annee")
                        .HasColumnType("integer")
                        .HasColumnName("annee");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EditionAlbumId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_album_id");

                    b.Property<decimal>("Prix")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)")
                        .HasColumnName("prix");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EditionAlbumId", "Annee")
                        .IsUnique();

                    b.ToTable("cotes_albums", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Editeur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<char>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(nom))::character(1)", true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NomRaw")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("nom_raw")
                        .HasComputedColumnSql("(nom COLLATE \"fr-x-icu\")", true);

                    b.Property<string>("SiteWeb")
                        .HasColumnType("text")
                        .HasColumnName("site_web");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Nom"), new[] { "french_ci_ai" });

                    b.HasIndex("NomRaw");

                    b.ToTable("editeurs", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Edition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("AnneeEdition")
                        .HasColumnType("integer")
                        .HasColumnName("annee_edition");

                    b.Property<bool?>("Couleur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("couleur");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("FormatEditionId")
                        .HasColumnType("integer")
                        .HasColumnName("format_edition_id");

                    b.Property<string>("Isbn")
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<int?>("NombreDePages")
                        .HasColumnType("integer")
                        .HasColumnName("nombre_de_pages");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NotesRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("notes_raw")
                        .HasComputedColumnSql("(notes COLLATE \"fr-x-icu\")", true);

                    b.Property<int?>("OrientationId")
                        .HasColumnType("integer")
                        .HasColumnName("orientation_id");

                    b.Property<int?>("ReliureId")
                        .HasColumnType("integer")
                        .HasColumnName("reliure_id");

                    b.Property<int?>("SensLectureId")
                        .HasColumnType("integer")
                        .HasColumnName("sens_lecture_id");

                    b.Property<int?>("TypeEditionId")
                        .HasColumnType("integer")
                        .HasColumnName("type_edition_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.Property<bool?>("Vo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("vo");

                    b.HasKey("Id");

                    b.HasIndex("FormatEditionId");

                    b.HasIndex("OrientationId");

                    b.HasIndex("ReliureId");

                    b.HasIndex("SensLectureId");

                    b.HasIndex("TypeEditionId");

                    b.ToTable("editions", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.EditionAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid")
                        .HasColumnName("album_id");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DateAchat")
                        .HasColumnType("date")
                        .HasColumnName("date_achat");

                    b.Property<bool?>("Dedicace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("dedicace");

                    b.Property<Guid>("EditeurId")
                        .HasColumnType("uuid")
                        .HasColumnName("editeur_id");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<int?>("EtatId")
                        .HasColumnType("integer")
                        .HasColumnName("etat_id");

                    b.Property<bool?>("Gratuit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("gratuit");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("NumeroPerso")
                        .HasColumnType("text")
                        .HasColumnName("numero_perso");

                    b.Property<bool?>("Occasion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("occasion");

                    b.Property<bool?>("Offert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("offert");

                    b.Property<decimal?>("Prix")
                        .HasPrecision(8, 3)
                        .HasColumnType("numeric(8,3)")
                        .HasColumnName("prix");

                    b.Property<bool>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("stock");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("EtatId");

                    b.HasIndex("AlbumId", "Id")
                        .IsUnique();

                    b.HasIndex("EditeurId", "CollectionId");

                    b.ToTable("editions_albums", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<char>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(nom))::character(1)", true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NomRaw")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("nom_raw")
                        .HasComputedColumnSql("(nom COLLATE \"fr-x-icu\")", true);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Nom"), new[] { "french_ci_ai" });

                    b.HasIndex("NomRaw");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9182466-4a97-4a16-a9f5-204a527766c6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Action",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9d8f75cb-feac-48af-86ae-f31c737d1b3f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Aventures",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("678307d8-862b-4f94-88d8-b8a6962e8292"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Humour",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("412f4f5e-309d-4f69-85b7-a018ffa49f71"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Héroïque fantaisie",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("294d78f5-8cc9-42ae-bbac-495079d812b8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Mythologie",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c8a3b392-5bfc-439a-a235-082abe5c0205"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Enfant",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eeff3beb-70c4-4ec0-811d-0c51a0bd008b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Fantastique",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2e1f9807-07d8-4036-8503-d5661660d8e6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Hommage",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c88e9abd-a9f8-410e-9897-6b2240be664e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Guerre",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("59d1f562-5c18-41cd-8eb8-53f259c0a2c9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Horreur",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dcc27058-f9e4-4b08-a9b5-1b099da8d13c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Policier",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8825a97c-7b24-4d30-96ce-68a1e30f801a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Science-Fiction",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c5ed5c16-bcfa-4b14-a0c6-f873db9e8aab"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Western",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fdac06e3-14ba-4801-9064-b6d87527f7c6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Anticipation",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("411b7fb5-3474-45eb-8bd5-4e1f67291438"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Animation",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e812da51-345a-4718-99fa-e11e9bf33f1c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Manga",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cf4a1427-90cf-4b57-ab3b-237d066e5173"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Comédie",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a9390924-20d5-4bf0-940a-95272359eefb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Comédie dramatique",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9509f256-8c4c-4080-ade5-c80b4cb62eb1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Comédie musicale",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3953f72d-208d-49c5-8a12-265f3b735b9e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Road movie",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("95c8f82f-b9bd-47df-b6c3-d724837a8703"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Historique",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f710a4af-49fb-4e9e-b062-5c5a9dd21931"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Thriller",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6d5d61fa-4a8d-42de-ab51-406ff7c913ab"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Espionnage",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1f03cc8f-b16f-4d4c-b886-3ebc553fb917"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Ésotérisme",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d6ec9b1e-1340-413d-a98e-fdb4eb80fc91"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Blog",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5858be6d-a72b-4b77-a464-80c2410fa38a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Érotique",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0d86e9c7-cfd2-43f5-ab3b-e004fb7de812"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Sport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a59d7520-fa3b-41f9-9aac-957f1efd6766"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Roman graphique",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("37f12eb3-0a8a-4ba4-b890-533c2d82cdeb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Jeunesse",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dad45ccb-19e4-4f15-bc2b-b1706d0994a5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Comics",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("10c607d5-6f20-44d5-b8a6-060a2bceddbb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Romance",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bc7157cc-3883-46e9-adc8-bacfc7710824"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Initiale = '\0',
                            Nom = "Pirates",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BDTheque.Data.Entities.GenreAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid")
                        .HasColumnName("album_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("FromSerie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("from_serie");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId", "AlbumId")
                        .IsUnique();

                    b.ToTable("genres_albums", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.GenreSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uuid")
                        .HasColumnName("serie_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("GenreId", "SerieId")
                        .IsUnique();

                    b.ToTable("genres_series", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("bytes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("edition_id");

                    b.Property<int>("Ordre")
                        .HasColumnType("integer")
                        .HasColumnName("ordre");

                    b.Property<string>("Titre")
                        .HasColumnType("text")
                        .HasColumnName("titre")
                        .UseCollation("french_ci_ai");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("EditionId", "TypeId", "Ordre")
                        .IsUnique();

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Defaut")
                        .HasColumnType("boolean")
                        .HasColumnName("defaut");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("libelle")
                        .UseCollation("french_ci_ai");

                    b.Property<int>("Ordre")
                        .HasColumnType("integer")
                        .HasColumnName("ordre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Category", "Libelle")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Category", "Libelle"), new[] { null, "french_ci_ai" });

                    b.HasIndex("Category", "Ordre")
                        .IsUnique();

                    b.ToTable("options", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Category = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Très mauvais",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 103,
                            Category = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Mauvais",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 105,
                            Category = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Bon",
                            Ordre = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 108,
                            Category = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Très bon",
                            Ordre = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 110,
                            Category = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Excellent (neuf)",
                            Ordre = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 200,
                            Category = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Cartonné",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 201,
                            Category = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Broché",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 301,
                            Category = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Première édition",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 302,
                            Category = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Edition spéciale",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 303,
                            Category = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Tirage de tête",
                            Ordre = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 401,
                            Category = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Portrait",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 402,
                            Category = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Italienne",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 501,
                            Category = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Poche",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 503,
                            Category = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Moyen (A5)",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 504,
                            Category = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Normal (A4)",
                            Ordre = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 505,
                            Category = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Grand (A3)",
                            Ordre = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 506,
                            Category = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Très grand (A2)",
                            Ordre = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 510,
                            Category = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Spécial",
                            Ordre = 6,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 600,
                            Category = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Couverture",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 603,
                            Category = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Page de garde",
                            Ordre = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 601,
                            Category = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Planche",
                            Ordre = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 602,
                            Category = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "4ème de couverture",
                            Ordre = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 604,
                            Category = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Dédicace",
                            Ordre = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 801,
                            Category = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Gauche à droite",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 802,
                            Category = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Droite à gauche",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 900,
                            Category = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = true,
                            Libelle = "Pas noté",
                            Ordre = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 901,
                            Category = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Très mauvais",
                            Ordre = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 902,
                            Category = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Mauvais",
                            Ordre = 3,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 903,
                            Category = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Moyen",
                            Ordre = 4,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 904,
                            Category = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Bien",
                            Ordre = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 905,
                            Category = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Defaut = false,
                            Libelle = "Très bien",
                            Ordre = 6,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Personne", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<string>("Biographie")
                        .HasColumnType("text")
                        .HasColumnName("biographie")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("BiographieRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("biographie_raw")
                        .HasComputedColumnSql("(biographie COLLATE \"fr-x-icu\")", true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<char>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(nom))::character(1)", true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NomRaw")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("nom_raw")
                        .HasComputedColumnSql("(nom COLLATE \"fr-x-icu\")", true);

                    b.Property<string>("SiteWeb")
                        .HasColumnType("text")
                        .HasColumnName("site_web");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Nom"), new[] { "french_ci_ai" });

                    b.HasIndex("NomRaw");

                    b.ToTable("personnes", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Serie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<bool?>("Complete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("complete");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("EditeurId")
                        .HasColumnType("uuid")
                        .HasColumnName("editeur_id");

                    b.Property<char?>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(titre))::character(1)", true);

                    b.Property<Guid>("ModeleEditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("modele_edition_id");

                    b.Property<int?>("NbAlbums")
                        .HasColumnType("integer")
                        .HasColumnName("nb_albums");

                    b.Property<int?>("NotationId")
                        .HasColumnType("integer")
                        .HasColumnName("notation_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NotesRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("notes_raw")
                        .HasComputedColumnSql("(notes COLLATE \"fr-x-icu\")", true);

                    b.Property<string>("SiteWeb")
                        .HasColumnType("text")
                        .HasColumnName("site_web");

                    b.Property<bool?>("SuivreManquants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("suivre_manquants");

                    b.Property<bool?>("SuivreSorties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("suivre_sorties");

                    b.Property<string>("Sujet")
                        .HasColumnType("text")
                        .HasColumnName("sujet")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("SujetRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("sujet_raw")
                        .HasComputedColumnSql("(sujet COLLATE \"fr-x-icu\")", true);

                    b.Property<bool?>("Terminee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("terminee");

                    b.Property<string>("Titre")
                        .HasColumnType("text")
                        .HasColumnName("titre")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("TitreRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("titre_raw")
                        .HasComputedColumnSql("(titre COLLATE \"fr-x-icu\")", true);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ModeleEditionId")
                        .IsUnique();

                    b.HasIndex("NotationId");

                    b.HasIndex("Titre");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Titre"), new[] { "french_ci_ai" });

                    b.HasIndex("TitreRaw");

                    b.HasIndex("EditeurId", "CollectionId");

                    b.ToTable("series", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Univers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string[]>("Associations")
                        .HasColumnType("text[]")
                        .HasColumnName("associations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("DescriptionRaw")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("description_raw")
                        .HasComputedColumnSql("(description COLLATE \"fr-x-icu\")", true);

                    b.Property<char>("Initiale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("initiale")
                        .HasComputedColumnSql("(upper(nom))::character(1)", true);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom")
                        .UseCollation("french_ci_ai");

                    b.Property<string>("NomRaw")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("nom_raw")
                        .HasComputedColumnSql("(nom COLLATE \"fr-x-icu\")", true);

                    b.Property<string>("SiteWeb")
                        .HasColumnType("text")
                        .HasColumnName("site_web");

                    b.Property<List<Guid>>("UniversBranches")
                        .HasColumnType("uuid[]")
                        .HasColumnName("univers_branches");

                    b.Property<Guid?>("UniversParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("univers_parent_id");

                    b.Property<Guid>("UniversRacineId")
                        .HasColumnType("uuid")
                        .HasColumnName("univers_racine_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Nom");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex("Nom"), new[] { "french_ci_ai" });

                    b.HasIndex("NomRaw");

                    b.HasIndex("UniversParentId");

                    b.HasIndex("UniversRacineId");

                    b.ToTable("univers", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.UniversAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid")
                        .HasColumnName("album_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("FromSerie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("from_serie");

                    b.Property<Guid>("UniversId")
                        .HasColumnType("uuid")
                        .HasColumnName("univers_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UniversId", "AlbumId")
                        .IsUnique();

                    b.ToTable("univers_albums", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.UniversSerie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SerieId")
                        .HasColumnType("uuid")
                        .HasColumnName("serie_id");

                    b.Property<Guid>("UniversId")
                        .HasColumnType("uuid")
                        .HasColumnName("univers_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(3) with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UniversId", "SerieId")
                        .IsUnique();

                    b.ToTable("univers_series", (string)null);
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Album", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Option", "Notation")
                        .WithMany("Albums")
                        .HasForeignKey("NotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BDTheque.Data.Entities.Serie", "Serie")
                        .WithMany("Albums")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Notation");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Auteur", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Personne", "Personne")
                        .WithMany("Auteurs")
                        .HasForeignKey("PersonneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Personne");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.AuteurAlbum", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Album", "Album")
                        .WithMany("AuteursAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Auteur", "Auteur")
                        .WithMany("AuteursAlbums")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Auteur");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.AuteurSerie", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Auteur", "Auteur")
                        .WithMany("AuteursSeries")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Serie", "Serie")
                        .WithMany("AuteursSeries")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Collection", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Editeur", "Editeur")
                        .WithMany("Collections")
                        .HasForeignKey("EditeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editeur");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.CoteAlbum", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.EditionAlbum", "EditionAlbum")
                        .WithMany("CotesAlbums")
                        .HasForeignKey("EditionAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditionAlbum");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Edition", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Option", "FormatEdition")
                        .WithMany("EditionFormatEditions")
                        .HasForeignKey("FormatEditionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDTheque.Data.Entities.Option", "Orientation")
                        .WithMany("EditionOrientations")
                        .HasForeignKey("OrientationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDTheque.Data.Entities.Option", "Reliure")
                        .WithMany("EditionReliures")
                        .HasForeignKey("ReliureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDTheque.Data.Entities.Option", "SensLecture")
                        .WithMany("EditionSensLectures")
                        .HasForeignKey("SensLectureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDTheque.Data.Entities.Option", "TypeEdition")
                        .WithMany("EditionTypeEditions")
                        .HasForeignKey("TypeEditionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FormatEdition");

                    b.Navigation("Orientation");

                    b.Navigation("Reliure");

                    b.Navigation("SensLecture");

                    b.Navigation("TypeEdition");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.EditionAlbum", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Album", "Album")
                        .WithMany("EditionsAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Editeur", "Editeur")
                        .WithMany("EditionsAlbums")
                        .HasForeignKey("EditeurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Edition", "Edition")
                        .WithMany("EditionsAlbums")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Option", "Etat")
                        .WithMany("EditionsAlbums")
                        .HasForeignKey("EtatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BDTheque.Data.Entities.Collection", "Collection")
                        .WithMany("EditionsAlbums")
                        .HasForeignKey("EditeurId", "CollectionId")
                        .HasPrincipalKey("EditeurId", "Id");

                    b.Navigation("Album");

                    b.Navigation("Collection");

                    b.Navigation("Editeur");

                    b.Navigation("Edition");

                    b.Navigation("Etat");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.GenreAlbum", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Album", "Album")
                        .WithMany("GenresAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Genre", "Genre")
                        .WithMany("GenresAlbums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.GenreSerie", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Genre", "Genre")
                        .WithMany("GenresSeries")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Serie", "Serie")
                        .WithMany("GenresSeries")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Image", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.EditionAlbum", "Edition")
                        .WithMany("Images")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Option", "Type")
                        .WithMany("Images")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Serie", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Editeur", "Editeur")
                        .WithMany("Series")
                        .HasForeignKey("EditeurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDTheque.Data.Entities.Edition", "ModeleEdition")
                        .WithOne("Serie")
                        .HasForeignKey("BDTheque.Data.Entities.Serie", "ModeleEditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Option", "Notation")
                        .WithMany("Series")
                        .HasForeignKey("NotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BDTheque.Data.Entities.Collection", "Collection")
                        .WithMany("Series")
                        .HasForeignKey("EditeurId", "CollectionId")
                        .HasPrincipalKey("EditeurId", "Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Collection");

                    b.Navigation("Editeur");

                    b.Navigation("ModeleEdition");

                    b.Navigation("Notation");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Univers", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Univers", "UniversParent")
                        .WithMany("UniversParents")
                        .HasForeignKey("UniversParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDTheque.Data.Entities.Univers", "UniversRacine")
                        .WithMany("UniversRacines")
                        .HasForeignKey("UniversRacineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UniversParent");

                    b.Navigation("UniversRacine");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.UniversAlbum", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Album", "Album")
                        .WithMany("UniversAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Univers", "Univers")
                        .WithMany("UniversAlbums")
                        .HasForeignKey("UniversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Univers");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.UniversSerie", b =>
                {
                    b.HasOne("BDTheque.Data.Entities.Serie", "Serie")
                        .WithMany("UniversSeries")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDTheque.Data.Entities.Univers", "Univers")
                        .WithMany("UniversSeries")
                        .HasForeignKey("UniversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("Univers");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Album", b =>
                {
                    b.Navigation("AuteursAlbums");

                    b.Navigation("EditionsAlbums");

                    b.Navigation("GenresAlbums");

                    b.Navigation("UniversAlbums");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Auteur", b =>
                {
                    b.Navigation("AuteursAlbums");

                    b.Navigation("AuteursSeries");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Collection", b =>
                {
                    b.Navigation("EditionsAlbums");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Editeur", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("EditionsAlbums");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Edition", b =>
                {
                    b.Navigation("EditionsAlbums");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.EditionAlbum", b =>
                {
                    b.Navigation("CotesAlbums");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Genre", b =>
                {
                    b.Navigation("GenresAlbums");

                    b.Navigation("GenresSeries");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Option", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("EditionFormatEditions");

                    b.Navigation("EditionOrientations");

                    b.Navigation("EditionReliures");

                    b.Navigation("EditionSensLectures");

                    b.Navigation("EditionTypeEditions");

                    b.Navigation("EditionsAlbums");

                    b.Navigation("Images");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Personne", b =>
                {
                    b.Navigation("Auteurs");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Serie", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AuteursSeries");

                    b.Navigation("GenresSeries");

                    b.Navigation("UniversSeries");
                });

            modelBuilder.Entity("BDTheque.Data.Entities.Univers", b =>
                {
                    b.Navigation("UniversAlbums");

                    b.Navigation("UniversParents");

                    b.Navigation("UniversRacines");

                    b.Navigation("UniversSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
