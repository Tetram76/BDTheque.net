name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ASPNETCORE_ENVIRONMENT: ${{ vars.ASPNETCORE_ENVIRONMENT }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for Sonar to get PR information, if any
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  check-modifications:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      api: ${{ steps.changes.outputs.api }}
      front: ${{ steps.changes.outputs.front }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          api:
            - 'api/**'
          front:
            - 'front/**'  

  backend-tests:
    needs: check-modifications
    if: ${{ needs.check-modifications.outputs.api == 'true' }}
    
    runs-on: ubuntu-latest

    strategy:
      matrix:
        POSTGRES_DB: 
          - test_db
        POSTGRES_USER: 
          - test_user
        POSTGRES_PASSWORD: 
          - test_password
        POSTGRES_PORT: 
          - 5432
        REDIS_PORT: 
          - 6379
        solution-path: 
          - ./api/
        solution-file: 
          - BDTheque.net.sln

    env:
      CI_DATABASE_URL: postgres://${{ matrix.POSTGRES_USER }}:${{ matrix.POSTGRES_PASSWORD }}@localhost:${{ matrix.POSTGRES_PORT }}/${{ matrix.POSTGRES_DB }}
      CI_CONNECTION_STRING: Host=localhost:${{ matrix.POSTGRES_PORT }};Database=${{ matrix.POSTGRES_DB }};Username=${{ matrix.POSTGRES_USER }};Password=${{ matrix.POSTGRES_PASSWORD }}
      CI_REDIS_URL: localhost:${{ matrix.REDIS_PORT }}

    services:
      database:
        image: postgres:${{ vars.POSTGRES_VERSION }}
        ports:
          - ${{ matrix.POSTGRES_PORT }}:5432
        env:
          POSTGRES_DB: ${{ matrix.POSTGRES_DB }}
          POSTGRES_USER: ${{ matrix.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ matrix.POSTGRES_PASSWORD }}

      redis:
        image: redis:6.0-alpine
        ports:
          - ${{ matrix.REDIS_PORT }}:6379

    steps:
      # Get sources
    
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      # Setup environment
    
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Setup .NET
        uses: actions/setup-dotnet@v4.2.0
        with:
          global-json-file: api/global.json
          dotnet-version: ${{ vars.DOTNET_VERSION }} 
      - name: Install EF
        run: |
          dotnet tool install --global dotnet-ef

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      # Setup project

      - name: Restore dependencies
        run: dotnet restore ${{ matrix.solution-path }}${{ matrix.solution-file }}
      - name: Setup database connection string
        run: |
          mkdir  ${{ matrix.solution-path }}Settings
          echo "{\"ConnectionStrings\": { \"BDThequeDatabase\": \"${{ env.CI_CONNECTION_STRING }}\", \"RedisEndpoint\": \"${{ env.CI_REDIS_URL }}\"} }" > ${{ matrix.solution-path }}BDTheque.Web/Settings/database.${{ env.ASPNETCORE_ENVIRONMENT }}.json

      # Run & Analyse

      - name: Start sonarCloud scanner
        run: |
          dotnet sonarscanner begin \
            /s:"${PWD}/${{ matrix.solution-path }}SonarQube.Analysis.xml" \
            /k:"Tetram76_BDTheque.net" /o:"tetram76" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="${{ matrix.solution-path }}TestResults/**/coverage.opencover.xml"
      - name: Build
        run: |
          dotnet build ${{ matrix.solution-path }}${{ matrix.solution-file }} --no-restore --no-incremental
      - name: Mount database
        run: |
          dotnet ef database update --project ${{ matrix.solution-path }}BDTheque.Data/BDTheque.Data.csproj --startup-project ${{ matrix.solution-path }}BDTheque.Web/BDTheque.Web.csproj --context BDTheque.Data.Context.BDThequeContext --no-build
      - name: Run tests
        env:
          SNAPSHOOTER_STRICT_MODE: true
        run: |
          dotnet test ${{ matrix.solution-path }}${{ matrix.solution-file }} \
            --no-build --verbosity normal \
            --collect:"XPlat Code Coverage;Format=opencover;SkipAutoProps=true" \
            --results-directory ${{ matrix.solution-path }}TestResults
      - name: Stop sonarCloud scanner & Publish
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
    
  frontend-tests:
    needs: check-modifications
    if: ${{ needs.check-modifications.changes.front == 'true' }}
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4.2.0
      with:
        node-version: ${{ vars.NODEJS_VERSION }} 

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test
